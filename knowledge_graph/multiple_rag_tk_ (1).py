# -*- coding: utf-8 -*-
"""multiple_rag_tk_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mRyYeq9Bx0eiuLyL98U9ranQyxyhfO7F
"""

!pip install datasets sentence-transformers scikit-learn ipywidgets --quiet

import json
import re
import numpy as np
from scipy.sparse import csr_matrix
from collections import Counter
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
from datasets import load_dataset
import ipywidgets as widgets
from IPython.display import display, clear_output

dataset = load_dataset("Selvakumarduraipandian/Thirukural")
kurals = dataset['train']

class BaseRetriever:
    def __init__(self, kurals, field='Couplet'):
        self.kurals = kurals
        self.field = field
    def retrieve(self, query, top_k=5):
        raise NotImplementedError

    def format_result(self, res):
        return (f"Kural {res['ID']}: {res['Kural']} (English: {res['Couplet']})\n"
                f"Explanation: {res['Vilakam']}\n")

class KeywordRetriever(BaseRetriever):

    def retrieve(self, query, top_k=5):
        query_words = set(re.findall(r'\w+', query.lower()))
        scores = []
        for kural in self.kurals:
            text = kural[self.field].lower()
            match_count = sum(1 for word in query_words if word in text)
            scores.append(match_count)


        top_indices = np.argsort(scores)[-top_k:][::-1]

        return [self.kurals[int(i)] for i in top_indices if scores[i] > 0]

class TFIDFRetriever(BaseRetriever):

    def __init__(self, kurals, field='Couplet'):
        super().__init__(kurals, field)
        self.vectorizer = TfidfVectorizer()
        self.tfidf_matrix = self.vectorizer.fit_transform([kural[self.field] for kural in kurals])

    def retrieve(self, query, top_k=5):
        query_vec = self.vectorizer.transform([query])
        similarities = cosine_similarity(query_vec, self.tfidf_matrix).flatten()
        top_indices = np.argsort(similarities)[-top_k:][::-1]

        return [self.kurals[int(i)] for i in top_indices]

class EmbeddingRetriever(BaseRetriever):

    def __init__(self, kurals, field='Couplet'):
        super().__init__(kurals, field)
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        self.embeddings = self.model.encode([kural[self.field] for kural in kurals])

    def retrieve(self, query, top_k=5):
        query_emb = self.model.encode([query])
        similarities = np.dot(self.embeddings, query_emb.T).flatten()
        top_indices = np.argsort(similarities)[-top_k:][::-1]

        return [self.kurals[int(i)] for i in top_indices]

retrievers = {
    'Keyword': KeywordRetriever(kurals),
    'TF-IDF': TFIDFRetriever(kurals),
    'Embedding': EmbeddingRetriever(kurals),
}

retriever_dropdown = widgets.Dropdown(
    options=list(retrievers.keys()),
    value='Keyword',
    description='Retriever:',
    style={'description_width': 'initial'}
)

query_input = widgets.Text(
    value='',
    placeholder='Enter query (e.g., knowledge and learning)',
    description='Query:',
    style={'description_width': 'initial'}
)

output = widgets.Output()

def on_submit(change):
    with output:
        clear_output()
        selected_retriever = retrievers[retriever_dropdown.value]
        query = query_input.value.strip()
        if query:
            try:
                results = selected_retriever.retrieve(query, top_k=5)
                if results:
                    for res in results:
                        print(selected_retriever.format_result(res))
                else:
                    print("No relevant kurals found for the query.")
            except Exception as e:
                print(f"Error during retrieval: {str(e)}")
        else:
            print("Please enter a query.")

submit_button = widgets.Button(description="Retrieve")
submit_button.on_click(on_submit)

# Display UI
display(retriever_dropdown, query_input, submit_button, output)